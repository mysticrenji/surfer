# Default values for surfer Helm chart

# Global settings
global:
  namespace: surfer

# Backend configuration
backend:
  replicaCount: 2
  image:
    repository: ghcr.io/mysticrenji/surfer-backend
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8080
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  # Environment variables
  env:
    port: "8080"
  
  # Health checks
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
  
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 5

# Frontend configuration
frontend:
  replicaCount: 2
  image:
    repository: ghcr.io/mysticrenji/surfer-frontend
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 80
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Health checks
  livenessProbe:
    enabled: true
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 10
    periodSeconds: 10
  
  readinessProbe:
    enabled: true
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 5
    periodSeconds: 5

# PostgreSQL configuration
postgresql:
  enabled: true
  image:
    repository: postgres
    tag: "15-alpine"
  
  persistence:
    enabled: true
    size: 5Gi
    storageClass: ""
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  # Database credentials (use secrets in production)
  auth:
    database: surfer
    username: surfer
    password: surfer  # Change this in production!

# Application secrets (must be configured before deployment)
secrets:
  googleClientId: "your-google-client-id"
  googleClientSecret: "your-google-client-secret"
  googleRedirectUrl: "https://surfer.example.com/api/v1/auth/google/callback"
  jwtSecret: "change-this-jwt-secret-in-production"
  
  # Database connection
  dbHost: "postgres"
  dbPort: "5432"
  dbUser: "surfer"
  dbPassword: "surfer"  # Change this in production!
  dbName: "surfer"
  dbSslMode: "disable"

# Service Account configuration
serviceAccount:
  create: true
  name: surfer
  annotations: {}

# RBAC configuration
rbac:
  create: true
  # ClusterRole rules for managing Kubernetes resources
  rules:
    - apiGroups: [""]
      resources: ["namespaces", "pods", "services", "configmaps", "secrets", "persistentvolumes", "persistentvolumeclaims"]
      verbs: ["get", "list", "watch", "create", "update", "delete"]
    - apiGroups: ["apps"]
      resources: ["deployments", "statefulsets", "daemonsets", "replicasets"]
      verbs: ["get", "list", "watch", "create", "update", "delete"]
    - apiGroups: ["batch"]
      resources: ["jobs", "cronjobs"]
      verbs: ["get", "list", "watch", "create", "update", "delete"]
    - apiGroups: ["networking.k8s.io"]
      resources: ["ingresses", "networkpolicies"]
      verbs: ["get", "list", "watch", "create", "update", "delete"]
    - apiGroups: [""]
      resources: ["pods/log"]
      verbs: ["get", "list"]

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  
  hosts:
    - host: surfer.example.com
      paths:
        - path: /api
          pathType: Prefix
          backend: backend
        - path: /
          pathType: Prefix
          backend: frontend
  
  tls:
    - secretName: surfer-tls
      hosts:
        - surfer.example.com

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}
